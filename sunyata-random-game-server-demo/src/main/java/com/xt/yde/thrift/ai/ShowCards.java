/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xt.yde.thrift.ai;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 出牌信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-07")
public class ShowCards implements org.apache.thrift.TBase<ShowCards, ShowCards._Fields>, java.io.Serializable, Cloneable, Comparable<ShowCards> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShowCards");

  private static final org.apache.thrift.protocol.TField CENTER_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("centerCards", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RIGHT_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("rightCards", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LEFT_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("leftCards", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastCards", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPlace", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NOW_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nowPlace", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_BOMB_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBombNumber", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENT_BOMB_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentBombNumber", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField AI_VERSION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("aiVersionFlag", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShowCardsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShowCardsTupleSchemeFactory());
  }

  public List<Integer> centerCards; // required
  public List<Integer> rightCards; // required
  public List<Integer> leftCards; // required
  public List<Integer> lastCards; // required
  public int lastPlace; // required
  public int nowPlace; // required
  public int totalBombNumber; // required
  public int currentBombNumber; // required
  public int aiVersionFlag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CENTER_CARDS((short)1, "centerCards"),
    RIGHT_CARDS((short)2, "rightCards"),
    LEFT_CARDS((short)3, "leftCards"),
    LAST_CARDS((short)4, "lastCards"),
    LAST_PLACE((short)5, "lastPlace"),
    NOW_PLACE((short)6, "nowPlace"),
    TOTAL_BOMB_NUMBER((short)7, "totalBombNumber"),
    CURRENT_BOMB_NUMBER((short)8, "currentBombNumber"),
    AI_VERSION_FLAG((short)9, "aiVersionFlag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CENTER_CARDS
          return CENTER_CARDS;
        case 2: // RIGHT_CARDS
          return RIGHT_CARDS;
        case 3: // LEFT_CARDS
          return LEFT_CARDS;
        case 4: // LAST_CARDS
          return LAST_CARDS;
        case 5: // LAST_PLACE
          return LAST_PLACE;
        case 6: // NOW_PLACE
          return NOW_PLACE;
        case 7: // TOTAL_BOMB_NUMBER
          return TOTAL_BOMB_NUMBER;
        case 8: // CURRENT_BOMB_NUMBER
          return CURRENT_BOMB_NUMBER;
        case 9: // AI_VERSION_FLAG
          return AI_VERSION_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTPLACE_ISSET_ID = 0;
  private static final int __NOWPLACE_ISSET_ID = 1;
  private static final int __TOTALBOMBNUMBER_ISSET_ID = 2;
  private static final int __CURRENTBOMBNUMBER_ISSET_ID = 3;
  private static final int __AIVERSIONFLAG_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CENTER_CARDS, new org.apache.thrift.meta_data.FieldMetaData("centerCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RIGHT_CARDS, new org.apache.thrift.meta_data.FieldMetaData("rightCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LEFT_CARDS, new org.apache.thrift.meta_data.FieldMetaData("leftCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LAST_CARDS, new org.apache.thrift.meta_data.FieldMetaData("lastCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LAST_PLACE, new org.apache.thrift.meta_data.FieldMetaData("lastPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOW_PLACE, new org.apache.thrift.meta_data.FieldMetaData("nowPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_BOMB_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalBombNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_BOMB_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("currentBombNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AI_VERSION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("aiVersionFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShowCards.class, metaDataMap);
  }

  public ShowCards() {
  }

  public ShowCards(
    List<Integer> centerCards,
    List<Integer> rightCards,
    List<Integer> leftCards,
    List<Integer> lastCards,
    int lastPlace,
    int nowPlace,
    int totalBombNumber,
    int currentBombNumber,
    int aiVersionFlag)
  {
    this();
    this.centerCards = centerCards;
    this.rightCards = rightCards;
    this.leftCards = leftCards;
    this.lastCards = lastCards;
    this.lastPlace = lastPlace;
    setLastPlaceIsSet(true);
    this.nowPlace = nowPlace;
    setNowPlaceIsSet(true);
    this.totalBombNumber = totalBombNumber;
    setTotalBombNumberIsSet(true);
    this.currentBombNumber = currentBombNumber;
    setCurrentBombNumberIsSet(true);
    this.aiVersionFlag = aiVersionFlag;
    setAiVersionFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShowCards(ShowCards other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCenterCards()) {
      List<Integer> __this__centerCards = new ArrayList<Integer>(other.centerCards);
      this.centerCards = __this__centerCards;
    }
    if (other.isSetRightCards()) {
      List<Integer> __this__rightCards = new ArrayList<Integer>(other.rightCards);
      this.rightCards = __this__rightCards;
    }
    if (other.isSetLeftCards()) {
      List<Integer> __this__leftCards = new ArrayList<Integer>(other.leftCards);
      this.leftCards = __this__leftCards;
    }
    if (other.isSetLastCards()) {
      List<Integer> __this__lastCards = new ArrayList<Integer>(other.lastCards);
      this.lastCards = __this__lastCards;
    }
    this.lastPlace = other.lastPlace;
    this.nowPlace = other.nowPlace;
    this.totalBombNumber = other.totalBombNumber;
    this.currentBombNumber = other.currentBombNumber;
    this.aiVersionFlag = other.aiVersionFlag;
  }

  public ShowCards deepCopy() {
    return new ShowCards(this);
  }

  @Override
  public void clear() {
    this.centerCards = null;
    this.rightCards = null;
    this.leftCards = null;
    this.lastCards = null;
    setLastPlaceIsSet(false);
    this.lastPlace = 0;
    setNowPlaceIsSet(false);
    this.nowPlace = 0;
    setTotalBombNumberIsSet(false);
    this.totalBombNumber = 0;
    setCurrentBombNumberIsSet(false);
    this.currentBombNumber = 0;
    setAiVersionFlagIsSet(false);
    this.aiVersionFlag = 0;
  }

  public int getCenterCardsSize() {
    return (this.centerCards == null) ? 0 : this.centerCards.size();
  }

  public java.util.Iterator<Integer> getCenterCardsIterator() {
    return (this.centerCards == null) ? null : this.centerCards.iterator();
  }

  public void addToCenterCards(int elem) {
    if (this.centerCards == null) {
      this.centerCards = new ArrayList<Integer>();
    }
    this.centerCards.add(elem);
  }

  public List<Integer> getCenterCards() {
    return this.centerCards;
  }

  public ShowCards setCenterCards(List<Integer> centerCards) {
    this.centerCards = centerCards;
    return this;
  }

  public void unsetCenterCards() {
    this.centerCards = null;
  }

  /** Returns true if field centerCards is set (has been assigned a value) and false otherwise */
  public boolean isSetCenterCards() {
    return this.centerCards != null;
  }

  public void setCenterCardsIsSet(boolean value) {
    if (!value) {
      this.centerCards = null;
    }
  }

  public int getRightCardsSize() {
    return (this.rightCards == null) ? 0 : this.rightCards.size();
  }

  public java.util.Iterator<Integer> getRightCardsIterator() {
    return (this.rightCards == null) ? null : this.rightCards.iterator();
  }

  public void addToRightCards(int elem) {
    if (this.rightCards == null) {
      this.rightCards = new ArrayList<Integer>();
    }
    this.rightCards.add(elem);
  }

  public List<Integer> getRightCards() {
    return this.rightCards;
  }

  public ShowCards setRightCards(List<Integer> rightCards) {
    this.rightCards = rightCards;
    return this;
  }

  public void unsetRightCards() {
    this.rightCards = null;
  }

  /** Returns true if field rightCards is set (has been assigned a value) and false otherwise */
  public boolean isSetRightCards() {
    return this.rightCards != null;
  }

  public void setRightCardsIsSet(boolean value) {
    if (!value) {
      this.rightCards = null;
    }
  }

  public int getLeftCardsSize() {
    return (this.leftCards == null) ? 0 : this.leftCards.size();
  }

  public java.util.Iterator<Integer> getLeftCardsIterator() {
    return (this.leftCards == null) ? null : this.leftCards.iterator();
  }

  public void addToLeftCards(int elem) {
    if (this.leftCards == null) {
      this.leftCards = new ArrayList<Integer>();
    }
    this.leftCards.add(elem);
  }

  public List<Integer> getLeftCards() {
    return this.leftCards;
  }

  public ShowCards setLeftCards(List<Integer> leftCards) {
    this.leftCards = leftCards;
    return this;
  }

  public void unsetLeftCards() {
    this.leftCards = null;
  }

  /** Returns true if field leftCards is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftCards() {
    return this.leftCards != null;
  }

  public void setLeftCardsIsSet(boolean value) {
    if (!value) {
      this.leftCards = null;
    }
  }

  public int getLastCardsSize() {
    return (this.lastCards == null) ? 0 : this.lastCards.size();
  }

  public java.util.Iterator<Integer> getLastCardsIterator() {
    return (this.lastCards == null) ? null : this.lastCards.iterator();
  }

  public void addToLastCards(int elem) {
    if (this.lastCards == null) {
      this.lastCards = new ArrayList<Integer>();
    }
    this.lastCards.add(elem);
  }

  public List<Integer> getLastCards() {
    return this.lastCards;
  }

  public ShowCards setLastCards(List<Integer> lastCards) {
    this.lastCards = lastCards;
    return this;
  }

  public void unsetLastCards() {
    this.lastCards = null;
  }

  /** Returns true if field lastCards is set (has been assigned a value) and false otherwise */
  public boolean isSetLastCards() {
    return this.lastCards != null;
  }

  public void setLastCardsIsSet(boolean value) {
    if (!value) {
      this.lastCards = null;
    }
  }

  public int getLastPlace() {
    return this.lastPlace;
  }

  public ShowCards setLastPlace(int lastPlace) {
    this.lastPlace = lastPlace;
    setLastPlaceIsSet(true);
    return this;
  }

  public void unsetLastPlace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPLACE_ISSET_ID);
  }

  /** Returns true if field lastPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPlace() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPLACE_ISSET_ID);
  }

  public void setLastPlaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPLACE_ISSET_ID, value);
  }

  public int getNowPlace() {
    return this.nowPlace;
  }

  public ShowCards setNowPlace(int nowPlace) {
    this.nowPlace = nowPlace;
    setNowPlaceIsSet(true);
    return this;
  }

  public void unsetNowPlace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOWPLACE_ISSET_ID);
  }

  /** Returns true if field nowPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetNowPlace() {
    return EncodingUtils.testBit(__isset_bitfield, __NOWPLACE_ISSET_ID);
  }

  public void setNowPlaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOWPLACE_ISSET_ID, value);
  }

  public int getTotalBombNumber() {
    return this.totalBombNumber;
  }

  public ShowCards setTotalBombNumber(int totalBombNumber) {
    this.totalBombNumber = totalBombNumber;
    setTotalBombNumberIsSet(true);
    return this;
  }

  public void unsetTotalBombNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALBOMBNUMBER_ISSET_ID);
  }

  /** Returns true if field totalBombNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalBombNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALBOMBNUMBER_ISSET_ID);
  }

  public void setTotalBombNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALBOMBNUMBER_ISSET_ID, value);
  }

  public int getCurrentBombNumber() {
    return this.currentBombNumber;
  }

  public ShowCards setCurrentBombNumber(int currentBombNumber) {
    this.currentBombNumber = currentBombNumber;
    setCurrentBombNumberIsSet(true);
    return this;
  }

  public void unsetCurrentBombNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTBOMBNUMBER_ISSET_ID);
  }

  /** Returns true if field currentBombNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentBombNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTBOMBNUMBER_ISSET_ID);
  }

  public void setCurrentBombNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTBOMBNUMBER_ISSET_ID, value);
  }

  public int getAiVersionFlag() {
    return this.aiVersionFlag;
  }

  public ShowCards setAiVersionFlag(int aiVersionFlag) {
    this.aiVersionFlag = aiVersionFlag;
    setAiVersionFlagIsSet(true);
    return this;
  }

  public void unsetAiVersionFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AIVERSIONFLAG_ISSET_ID);
  }

  /** Returns true if field aiVersionFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAiVersionFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __AIVERSIONFLAG_ISSET_ID);
  }

  public void setAiVersionFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AIVERSIONFLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CENTER_CARDS:
      if (value == null) {
        unsetCenterCards();
      } else {
        setCenterCards((List<Integer>)value);
      }
      break;

    case RIGHT_CARDS:
      if (value == null) {
        unsetRightCards();
      } else {
        setRightCards((List<Integer>)value);
      }
      break;

    case LEFT_CARDS:
      if (value == null) {
        unsetLeftCards();
      } else {
        setLeftCards((List<Integer>)value);
      }
      break;

    case LAST_CARDS:
      if (value == null) {
        unsetLastCards();
      } else {
        setLastCards((List<Integer>)value);
      }
      break;

    case LAST_PLACE:
      if (value == null) {
        unsetLastPlace();
      } else {
        setLastPlace((Integer)value);
      }
      break;

    case NOW_PLACE:
      if (value == null) {
        unsetNowPlace();
      } else {
        setNowPlace((Integer)value);
      }
      break;

    case TOTAL_BOMB_NUMBER:
      if (value == null) {
        unsetTotalBombNumber();
      } else {
        setTotalBombNumber((Integer)value);
      }
      break;

    case CURRENT_BOMB_NUMBER:
      if (value == null) {
        unsetCurrentBombNumber();
      } else {
        setCurrentBombNumber((Integer)value);
      }
      break;

    case AI_VERSION_FLAG:
      if (value == null) {
        unsetAiVersionFlag();
      } else {
        setAiVersionFlag((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CENTER_CARDS:
      return getCenterCards();

    case RIGHT_CARDS:
      return getRightCards();

    case LEFT_CARDS:
      return getLeftCards();

    case LAST_CARDS:
      return getLastCards();

    case LAST_PLACE:
      return getLastPlace();

    case NOW_PLACE:
      return getNowPlace();

    case TOTAL_BOMB_NUMBER:
      return getTotalBombNumber();

    case CURRENT_BOMB_NUMBER:
      return getCurrentBombNumber();

    case AI_VERSION_FLAG:
      return getAiVersionFlag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CENTER_CARDS:
      return isSetCenterCards();
    case RIGHT_CARDS:
      return isSetRightCards();
    case LEFT_CARDS:
      return isSetLeftCards();
    case LAST_CARDS:
      return isSetLastCards();
    case LAST_PLACE:
      return isSetLastPlace();
    case NOW_PLACE:
      return isSetNowPlace();
    case TOTAL_BOMB_NUMBER:
      return isSetTotalBombNumber();
    case CURRENT_BOMB_NUMBER:
      return isSetCurrentBombNumber();
    case AI_VERSION_FLAG:
      return isSetAiVersionFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShowCards)
      return this.equals((ShowCards)that);
    return false;
  }

  public boolean equals(ShowCards that) {
    if (that == null)
      return false;

    boolean this_present_centerCards = true && this.isSetCenterCards();
    boolean that_present_centerCards = true && that.isSetCenterCards();
    if (this_present_centerCards || that_present_centerCards) {
      if (!(this_present_centerCards && that_present_centerCards))
        return false;
      if (!this.centerCards.equals(that.centerCards))
        return false;
    }

    boolean this_present_rightCards = true && this.isSetRightCards();
    boolean that_present_rightCards = true && that.isSetRightCards();
    if (this_present_rightCards || that_present_rightCards) {
      if (!(this_present_rightCards && that_present_rightCards))
        return false;
      if (!this.rightCards.equals(that.rightCards))
        return false;
    }

    boolean this_present_leftCards = true && this.isSetLeftCards();
    boolean that_present_leftCards = true && that.isSetLeftCards();
    if (this_present_leftCards || that_present_leftCards) {
      if (!(this_present_leftCards && that_present_leftCards))
        return false;
      if (!this.leftCards.equals(that.leftCards))
        return false;
    }

    boolean this_present_lastCards = true && this.isSetLastCards();
    boolean that_present_lastCards = true && that.isSetLastCards();
    if (this_present_lastCards || that_present_lastCards) {
      if (!(this_present_lastCards && that_present_lastCards))
        return false;
      if (!this.lastCards.equals(that.lastCards))
        return false;
    }

    boolean this_present_lastPlace = true;
    boolean that_present_lastPlace = true;
    if (this_present_lastPlace || that_present_lastPlace) {
      if (!(this_present_lastPlace && that_present_lastPlace))
        return false;
      if (this.lastPlace != that.lastPlace)
        return false;
    }

    boolean this_present_nowPlace = true;
    boolean that_present_nowPlace = true;
    if (this_present_nowPlace || that_present_nowPlace) {
      if (!(this_present_nowPlace && that_present_nowPlace))
        return false;
      if (this.nowPlace != that.nowPlace)
        return false;
    }

    boolean this_present_totalBombNumber = true;
    boolean that_present_totalBombNumber = true;
    if (this_present_totalBombNumber || that_present_totalBombNumber) {
      if (!(this_present_totalBombNumber && that_present_totalBombNumber))
        return false;
      if (this.totalBombNumber != that.totalBombNumber)
        return false;
    }

    boolean this_present_currentBombNumber = true;
    boolean that_present_currentBombNumber = true;
    if (this_present_currentBombNumber || that_present_currentBombNumber) {
      if (!(this_present_currentBombNumber && that_present_currentBombNumber))
        return false;
      if (this.currentBombNumber != that.currentBombNumber)
        return false;
    }

    boolean this_present_aiVersionFlag = true;
    boolean that_present_aiVersionFlag = true;
    if (this_present_aiVersionFlag || that_present_aiVersionFlag) {
      if (!(this_present_aiVersionFlag && that_present_aiVersionFlag))
        return false;
      if (this.aiVersionFlag != that.aiVersionFlag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_centerCards = true && (isSetCenterCards());
    list.add(present_centerCards);
    if (present_centerCards)
      list.add(centerCards);

    boolean present_rightCards = true && (isSetRightCards());
    list.add(present_rightCards);
    if (present_rightCards)
      list.add(rightCards);

    boolean present_leftCards = true && (isSetLeftCards());
    list.add(present_leftCards);
    if (present_leftCards)
      list.add(leftCards);

    boolean present_lastCards = true && (isSetLastCards());
    list.add(present_lastCards);
    if (present_lastCards)
      list.add(lastCards);

    boolean present_lastPlace = true;
    list.add(present_lastPlace);
    if (present_lastPlace)
      list.add(lastPlace);

    boolean present_nowPlace = true;
    list.add(present_nowPlace);
    if (present_nowPlace)
      list.add(nowPlace);

    boolean present_totalBombNumber = true;
    list.add(present_totalBombNumber);
    if (present_totalBombNumber)
      list.add(totalBombNumber);

    boolean present_currentBombNumber = true;
    list.add(present_currentBombNumber);
    if (present_currentBombNumber)
      list.add(currentBombNumber);

    boolean present_aiVersionFlag = true;
    list.add(present_aiVersionFlag);
    if (present_aiVersionFlag)
      list.add(aiVersionFlag);

    return list.hashCode();
  }

  @Override
  public int compareTo(ShowCards other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCenterCards()).compareTo(other.isSetCenterCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenterCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centerCards, other.centerCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightCards()).compareTo(other.isSetRightCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightCards, other.rightCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftCards()).compareTo(other.isSetLeftCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftCards, other.leftCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastCards()).compareTo(other.isSetLastCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastCards, other.lastCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPlace()).compareTo(other.isSetLastPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPlace, other.lastPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNowPlace()).compareTo(other.isSetNowPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowPlace, other.nowPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalBombNumber()).compareTo(other.isSetTotalBombNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalBombNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBombNumber, other.totalBombNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentBombNumber()).compareTo(other.isSetCurrentBombNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentBombNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentBombNumber, other.currentBombNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAiVersionFlag()).compareTo(other.isSetAiVersionFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAiVersionFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aiVersionFlag, other.aiVersionFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShowCards(");
    boolean first = true;

    sb.append("centerCards:");
    if (this.centerCards == null) {
      sb.append("null");
    } else {
      sb.append(this.centerCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightCards:");
    if (this.rightCards == null) {
      sb.append("null");
    } else {
      sb.append(this.rightCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftCards:");
    if (this.leftCards == null) {
      sb.append("null");
    } else {
      sb.append(this.leftCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastCards:");
    if (this.lastCards == null) {
      sb.append("null");
    } else {
      sb.append(this.lastCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPlace:");
    sb.append(this.lastPlace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowPlace:");
    sb.append(this.nowPlace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalBombNumber:");
    sb.append(this.totalBombNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentBombNumber:");
    sb.append(this.currentBombNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("aiVersionFlag:");
    sb.append(this.aiVersionFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShowCardsStandardSchemeFactory implements SchemeFactory {
    public ShowCardsStandardScheme getScheme() {
      return new ShowCardsStandardScheme();
    }
  }

  private static class ShowCardsStandardScheme extends StandardScheme<ShowCards> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShowCards struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // CENTER_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.centerCards = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.centerCards.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setCenterCardsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RIGHT_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.rightCards = new ArrayList<Integer>(_list19.size);
                int _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readI32();
                  struct.rightCards.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setRightCardsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEFT_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.leftCards = new ArrayList<Integer>(_list22.size);
                int _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = iprot.readI32();
                  struct.leftCards.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setLeftCardsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.lastCards = new ArrayList<Integer>(_list25.size);
                int _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = iprot.readI32();
                  struct.lastCards.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setLastCardsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastPlace = iprot.readI32();
              struct.setLastPlaceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOW_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nowPlace = iprot.readI32();
              struct.setNowPlaceIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_BOMB_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalBombNumber = iprot.readI32();
              struct.setTotalBombNumberIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENT_BOMB_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentBombNumber = iprot.readI32();
              struct.setCurrentBombNumberIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AI_VERSION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aiVersionFlag = iprot.readI32();
              struct.setAiVersionFlagIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShowCards struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.centerCards != null) {
        oprot.writeFieldBegin(CENTER_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.centerCards.size()));
          for (int _iter28 : struct.centerCards)
          {
            oprot.writeI32(_iter28);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rightCards != null) {
        oprot.writeFieldBegin(RIGHT_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.rightCards.size()));
          for (int _iter29 : struct.rightCards)
          {
            oprot.writeI32(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.leftCards != null) {
        oprot.writeFieldBegin(LEFT_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.leftCards.size()));
          for (int _iter30 : struct.leftCards)
          {
            oprot.writeI32(_iter30);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.lastCards != null) {
        oprot.writeFieldBegin(LAST_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.lastCards.size()));
          for (int _iter31 : struct.lastCards)
          {
            oprot.writeI32(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_PLACE_FIELD_DESC);
      oprot.writeI32(struct.lastPlace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOW_PLACE_FIELD_DESC);
      oprot.writeI32(struct.nowPlace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_BOMB_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalBombNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_BOMB_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.currentBombNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AI_VERSION_FLAG_FIELD_DESC);
      oprot.writeI32(struct.aiVersionFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShowCardsTupleSchemeFactory implements SchemeFactory {
    public ShowCardsTupleScheme getScheme() {
      return new ShowCardsTupleScheme();
    }
  }

  private static class ShowCardsTupleScheme extends TupleScheme<ShowCards> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShowCards struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCenterCards()) {
        optionals.set(0);
      }
      if (struct.isSetRightCards()) {
        optionals.set(1);
      }
      if (struct.isSetLeftCards()) {
        optionals.set(2);
      }
      if (struct.isSetLastCards()) {
        optionals.set(3);
      }
      if (struct.isSetLastPlace()) {
        optionals.set(4);
      }
      if (struct.isSetNowPlace()) {
        optionals.set(5);
      }
      if (struct.isSetTotalBombNumber()) {
        optionals.set(6);
      }
      if (struct.isSetCurrentBombNumber()) {
        optionals.set(7);
      }
      if (struct.isSetAiVersionFlag()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCenterCards()) {
        {
          oprot.writeI32(struct.centerCards.size());
          for (int _iter32 : struct.centerCards)
          {
            oprot.writeI32(_iter32);
          }
        }
      }
      if (struct.isSetRightCards()) {
        {
          oprot.writeI32(struct.rightCards.size());
          for (int _iter33 : struct.rightCards)
          {
            oprot.writeI32(_iter33);
          }
        }
      }
      if (struct.isSetLeftCards()) {
        {
          oprot.writeI32(struct.leftCards.size());
          for (int _iter34 : struct.leftCards)
          {
            oprot.writeI32(_iter34);
          }
        }
      }
      if (struct.isSetLastCards()) {
        {
          oprot.writeI32(struct.lastCards.size());
          for (int _iter35 : struct.lastCards)
          {
            oprot.writeI32(_iter35);
          }
        }
      }
      if (struct.isSetLastPlace()) {
        oprot.writeI32(struct.lastPlace);
      }
      if (struct.isSetNowPlace()) {
        oprot.writeI32(struct.nowPlace);
      }
      if (struct.isSetTotalBombNumber()) {
        oprot.writeI32(struct.totalBombNumber);
      }
      if (struct.isSetCurrentBombNumber()) {
        oprot.writeI32(struct.currentBombNumber);
      }
      if (struct.isSetAiVersionFlag()) {
        oprot.writeI32(struct.aiVersionFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShowCards struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.centerCards = new ArrayList<Integer>(_list36.size);
          int _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readI32();
            struct.centerCards.add(_elem37);
          }
        }
        struct.setCenterCardsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.rightCards = new ArrayList<Integer>(_list39.size);
          int _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readI32();
            struct.rightCards.add(_elem40);
          }
        }
        struct.setRightCardsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.leftCards = new ArrayList<Integer>(_list42.size);
          int _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readI32();
            struct.leftCards.add(_elem43);
          }
        }
        struct.setLeftCardsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.lastCards = new ArrayList<Integer>(_list45.size);
          int _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI32();
            struct.lastCards.add(_elem46);
          }
        }
        struct.setLastCardsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastPlace = iprot.readI32();
        struct.setLastPlaceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nowPlace = iprot.readI32();
        struct.setNowPlaceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalBombNumber = iprot.readI32();
        struct.setTotalBombNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currentBombNumber = iprot.readI32();
        struct.setCurrentBombNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.aiVersionFlag = iprot.readI32();
        struct.setAiVersionFlagIsSet(true);
      }
    }
  }

}

