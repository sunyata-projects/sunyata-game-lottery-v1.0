/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xt.yde.thrift.card;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-19")
public class DBCardsService {

  public interface Iface {

    /**
     * 获取发牌信息
     * gameType：游戏类型（常规：1、疯狂：2、积分：3）
     * winLevel：奖励等级
     * bombNum：炸弹数量
     * grade：难度等级
     * 
     * @param gameType
     * @param winLevel
     * @param bombNum
     * @param grade
     */
    public Cards getCards(int gameType, int winLevel, int bombNum, int grade) throws TException;

    /**
     * 根牌库ID获取发牌信息
     * cardId：牌库ID
     *
     * @param cardId
     */
    public Cards getCardsById(String cardId) throws TException;

    public Cards getFCardsById(String cardId) throws TException;

  }

  public interface AsyncIface {

    public void getCards(int gameType, int winLevel, int bombNum, int grade, AsyncMethodCallback resultHandler) throws TException;

    public void getCardsById(String cardId, AsyncMethodCallback resultHandler) throws TException;

    public void getFCardsById(String cardId, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Cards getCards(int gameType, int winLevel, int bombNum, int grade) throws TException
    {
      send_getCards(gameType, winLevel, bombNum, grade);
      return recv_getCards();
    }

    public void send_getCards(int gameType, int winLevel, int bombNum, int grade) throws TException
    {
      getCards_args args = new getCards_args();
      args.setGameType(gameType);
      args.setWinLevel(winLevel);
      args.setBombNum(bombNum);
      args.setGrade(grade);
      sendBase("getCards", args);
    }

    public Cards recv_getCards() throws TException
    {
      getCards_result result = new getCards_result();
      receiveBase(result, "getCards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCards failed: unknown result");
    }

    public Cards getCardsById(String cardId) throws TException
    {
      send_getCardsById(cardId);
      return recv_getCardsById();
    }

    public void send_getCardsById(String cardId) throws TException
    {
      getCardsById_args args = new getCardsById_args();
      args.setCardId(cardId);
      sendBase("getCardsById", args);
    }

    public Cards recv_getCardsById() throws TException
    {
      getCardsById_result result = new getCardsById_result();
      receiveBase(result, "getCardsById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCardsById failed: unknown result");
    }

    public Cards getFCardsById(String cardId) throws TException
    {
      send_getFCardsById(cardId);
      return recv_getFCardsById();
    }

    public void send_getFCardsById(String cardId) throws TException
    {
      getFCardsById_args args = new getFCardsById_args();
      args.setCardId(cardId);
      sendBase("getFCardsById", args);
    }

    public Cards recv_getFCardsById() throws TException
    {
      getFCardsById_result result = new getFCardsById_result();
      receiveBase(result, "getFCardsById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFCardsById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCards(int gameType, int winLevel, int bombNum, int grade, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCards_call method_call = new getCards_call(gameType, winLevel, bombNum, grade, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCards_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int gameType;
      private int winLevel;
      private int bombNum;
      private int grade;
      public getCards_call(int gameType, int winLevel, int bombNum, int grade, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameType = gameType;
        this.winLevel = winLevel;
        this.bombNum = bombNum;
        this.grade = grade;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCards", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCards_args args = new getCards_args();
        args.setGameType(gameType);
        args.setWinLevel(winLevel);
        args.setBombNum(bombNum);
        args.setGrade(grade);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cards getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCards();
      }
    }

    public void getCardsById(String cardId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCardsById_call method_call = new getCardsById_call(cardId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCardsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cardId;
      public getCardsById_call(String cardId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cardId = cardId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCardsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCardsById_args args = new getCardsById_args();
        args.setCardId(cardId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cards getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCardsById();
      }
    }

    public void getFCardsById(String cardId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getFCardsById_call method_call = new getFCardsById_call(cardId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFCardsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cardId;
      public getFCardsById_call(String cardId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cardId = cardId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFCardsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFCardsById_args args = new getFCardsById_args();
        args.setCardId(cardId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cards getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFCardsById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCards", new getCards());
      processMap.put("getCardsById", new getCardsById());
      processMap.put("getFCardsById", new getFCardsById());
      return processMap;
    }

    public static class getCards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCards_args> {
      public getCards() {
        super("getCards");
      }

      public getCards_args getEmptyArgsInstance() {
        return new getCards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCards_result getResult(I iface, getCards_args args) throws TException {
        getCards_result result = new getCards_result();
        result.success = iface.getCards(args.gameType, args.winLevel, args.bombNum, args.grade);
        return result;
      }
    }

    public static class getCardsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCardsById_args> {
      public getCardsById() {
        super("getCardsById");
      }

      public getCardsById_args getEmptyArgsInstance() {
        return new getCardsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCardsById_result getResult(I iface, getCardsById_args args) throws TException {
        getCardsById_result result = new getCardsById_result();
        result.success = iface.getCardsById(args.cardId);
        return result;
      }
    }

    public static class getFCardsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFCardsById_args> {
      public getFCardsById() {
        super("getFCardsById");
      }

      public getFCardsById_args getEmptyArgsInstance() {
        return new getFCardsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFCardsById_result getResult(I iface, getFCardsById_args args) throws TException {
        getFCardsById_result result = new getFCardsById_result();
        result.success = iface.getFCardsById(args.cardId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCards", new getCards());
      processMap.put("getCardsById", new getCardsById());
      processMap.put("getFCardsById", new getFCardsById());
      return processMap;
    }

    public static class getCards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCards_args, Cards> {
      public getCards() {
        super("getCards");
      }

      public getCards_args getEmptyArgsInstance() {
        return new getCards_args();
      }

      public AsyncMethodCallback<Cards> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Cards>() {
          public void onComplete(Cards o) {
            getCards_result result = new getCards_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCards_result result = new getCards_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCards_args args, AsyncMethodCallback<Cards> resultHandler) throws TException {
        iface.getCards(args.gameType, args.winLevel, args.bombNum, args.grade,resultHandler);
      }
    }

    public static class getCardsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCardsById_args, Cards> {
      public getCardsById() {
        super("getCardsById");
      }

      public getCardsById_args getEmptyArgsInstance() {
        return new getCardsById_args();
      }

      public AsyncMethodCallback<Cards> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Cards>() {
          public void onComplete(Cards o) {
            getCardsById_result result = new getCardsById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCardsById_result result = new getCardsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCardsById_args args, AsyncMethodCallback<Cards> resultHandler) throws TException {
        iface.getCardsById(args.cardId,resultHandler);
      }
    }

    public static class getFCardsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFCardsById_args, Cards> {
      public getFCardsById() {
        super("getFCardsById");
      }

      public getFCardsById_args getEmptyArgsInstance() {
        return new getFCardsById_args();
      }

      public AsyncMethodCallback<Cards> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Cards>() {
          public void onComplete(Cards o) {
            getFCardsById_result result = new getFCardsById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFCardsById_result result = new getFCardsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFCardsById_args args, AsyncMethodCallback<Cards> resultHandler) throws TException {
        iface.getFCardsById(args.cardId,resultHandler);
      }
    }

  }

  public static class getCards_args implements org.apache.thrift.TBase<getCards_args, getCards_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCards_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCards_args");

    private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WIN_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("winLevel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BOMB_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bombNum", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCards_argsTupleSchemeFactory());
    }

    public int gameType; // required
    public int winLevel; // required
    public int bombNum; // required
    public int grade; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_TYPE((short)1, "gameType"),
      WIN_LEVEL((short)2, "winLevel"),
      BOMB_NUM((short)3, "bombNum"),
      GRADE((short)4, "grade");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_TYPE
            return GAME_TYPE;
          case 2: // WIN_LEVEL
            return WIN_LEVEL;
          case 3: // BOMB_NUM
            return BOMB_NUM;
          case 4: // GRADE
            return GRADE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GAMETYPE_ISSET_ID = 0;
    private static final int __WINLEVEL_ISSET_ID = 1;
    private static final int __BOMBNUM_ISSET_ID = 2;
    private static final int __GRADE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WIN_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("winLevel", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BOMB_NUM, new org.apache.thrift.meta_data.FieldMetaData("bombNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCards_args.class, metaDataMap);
    }

    public getCards_args() {
    }

    public getCards_args(
      int gameType,
      int winLevel,
      int bombNum,
      int grade)
    {
      this();
      this.gameType = gameType;
      setGameTypeIsSet(true);
      this.winLevel = winLevel;
      setWinLevelIsSet(true);
      this.bombNum = bombNum;
      setBombNumIsSet(true);
      this.grade = grade;
      setGradeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCards_args(getCards_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.gameType = other.gameType;
      this.winLevel = other.winLevel;
      this.bombNum = other.bombNum;
      this.grade = other.grade;
    }

    public getCards_args deepCopy() {
      return new getCards_args(this);
    }

    @Override
    public void clear() {
      setGameTypeIsSet(false);
      this.gameType = 0;
      setWinLevelIsSet(false);
      this.winLevel = 0;
      setBombNumIsSet(false);
      this.bombNum = 0;
      setGradeIsSet(false);
      this.grade = 0;
    }

    public int getGameType() {
      return this.gameType;
    }

    public getCards_args setGameType(int gameType) {
      this.gameType = gameType;
      setGameTypeIsSet(true);
      return this;
    }

    public void unsetGameType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
    }

    /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
    public boolean isSetGameType() {
      return EncodingUtils.testBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
    }

    public void setGameTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETYPE_ISSET_ID, value);
    }

    public int getWinLevel() {
      return this.winLevel;
    }

    public getCards_args setWinLevel(int winLevel) {
      this.winLevel = winLevel;
      setWinLevelIsSet(true);
      return this;
    }

    public void unsetWinLevel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINLEVEL_ISSET_ID);
    }

    /** Returns true if field winLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetWinLevel() {
      return EncodingUtils.testBit(__isset_bitfield, __WINLEVEL_ISSET_ID);
    }

    public void setWinLevelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINLEVEL_ISSET_ID, value);
    }

    public int getBombNum() {
      return this.bombNum;
    }

    public getCards_args setBombNum(int bombNum) {
      this.bombNum = bombNum;
      setBombNumIsSet(true);
      return this;
    }

    public void unsetBombNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOMBNUM_ISSET_ID);
    }

    /** Returns true if field bombNum is set (has been assigned a value) and false otherwise */
    public boolean isSetBombNum() {
      return EncodingUtils.testBit(__isset_bitfield, __BOMBNUM_ISSET_ID);
    }

    public void setBombNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOMBNUM_ISSET_ID, value);
    }

    public int getGrade() {
      return this.grade;
    }

    public getCards_args setGrade(int grade) {
      this.grade = grade;
      setGradeIsSet(true);
      return this;
    }

    public void unsetGrade() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRADE_ISSET_ID);
    }

    /** Returns true if field grade is set (has been assigned a value) and false otherwise */
    public boolean isSetGrade() {
      return EncodingUtils.testBit(__isset_bitfield, __GRADE_ISSET_ID);
    }

    public void setGradeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRADE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_TYPE:
        if (value == null) {
          unsetGameType();
        } else {
          setGameType((Integer)value);
        }
        break;

      case WIN_LEVEL:
        if (value == null) {
          unsetWinLevel();
        } else {
          setWinLevel((Integer)value);
        }
        break;

      case BOMB_NUM:
        if (value == null) {
          unsetBombNum();
        } else {
          setBombNum((Integer)value);
        }
        break;

      case GRADE:
        if (value == null) {
          unsetGrade();
        } else {
          setGrade((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_TYPE:
        return getGameType();

      case WIN_LEVEL:
        return getWinLevel();

      case BOMB_NUM:
        return getBombNum();

      case GRADE:
        return getGrade();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_TYPE:
        return isSetGameType();
      case WIN_LEVEL:
        return isSetWinLevel();
      case BOMB_NUM:
        return isSetBombNum();
      case GRADE:
        return isSetGrade();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCards_args)
        return this.equals((getCards_args)that);
      return false;
    }

    public boolean equals(getCards_args that) {
      if (that == null)
        return false;

      boolean this_present_gameType = true;
      boolean that_present_gameType = true;
      if (this_present_gameType || that_present_gameType) {
        if (!(this_present_gameType && that_present_gameType))
          return false;
        if (this.gameType != that.gameType)
          return false;
      }

      boolean this_present_winLevel = true;
      boolean that_present_winLevel = true;
      if (this_present_winLevel || that_present_winLevel) {
        if (!(this_present_winLevel && that_present_winLevel))
          return false;
        if (this.winLevel != that.winLevel)
          return false;
      }

      boolean this_present_bombNum = true;
      boolean that_present_bombNum = true;
      if (this_present_bombNum || that_present_bombNum) {
        if (!(this_present_bombNum && that_present_bombNum))
          return false;
        if (this.bombNum != that.bombNum)
          return false;
      }

      boolean this_present_grade = true;
      boolean that_present_grade = true;
      if (this_present_grade || that_present_grade) {
        if (!(this_present_grade && that_present_grade))
          return false;
        if (this.grade != that.grade)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_gameType = true;
      list.add(present_gameType);
      if (present_gameType)
        list.add(gameType);

      boolean present_winLevel = true;
      list.add(present_winLevel);
      if (present_winLevel)
        list.add(winLevel);

      boolean present_bombNum = true;
      list.add(present_bombNum);
      if (present_bombNum)
        list.add(bombNum);

      boolean present_grade = true;
      list.add(present_grade);
      if (present_grade)
        list.add(grade);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGameType()).compareTo(other.isSetGameType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, other.gameType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWinLevel()).compareTo(other.isSetWinLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWinLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winLevel, other.winLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBombNum()).compareTo(other.isSetBombNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBombNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bombNum, other.bombNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGrade()).compareTo(other.isSetGrade());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGrade()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, other.grade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCards_args(");
      boolean first = true;

      sb.append("gameType:");
      sb.append(this.gameType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("winLevel:");
      sb.append(this.winLevel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bombNum:");
      sb.append(this.bombNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("grade:");
      sb.append(this.grade);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCards_argsStandardSchemeFactory implements SchemeFactory {
      public getCards_argsStandardScheme getScheme() {
        return new getCards_argsStandardScheme();
      }
    }

    private static class getCards_argsStandardScheme extends StandardScheme<getCards_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCards_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.gameType = iprot.readI32();
                struct.setGameTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WIN_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.winLevel = iprot.readI32();
                struct.setWinLevelIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BOMB_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bombNum = iprot.readI32();
                struct.setBombNumIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GRADE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.grade = iprot.readI32();
                struct.setGradeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCards_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
        oprot.writeI32(struct.gameType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WIN_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.winLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BOMB_NUM_FIELD_DESC);
        oprot.writeI32(struct.bombNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GRADE_FIELD_DESC);
        oprot.writeI32(struct.grade);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCards_argsTupleSchemeFactory implements SchemeFactory {
      public getCards_argsTupleScheme getScheme() {
        return new getCards_argsTupleScheme();
      }
    }

    private static class getCards_argsTupleScheme extends TupleScheme<getCards_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCards_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameType()) {
          optionals.set(0);
        }
        if (struct.isSetWinLevel()) {
          optionals.set(1);
        }
        if (struct.isSetBombNum()) {
          optionals.set(2);
        }
        if (struct.isSetGrade()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGameType()) {
          oprot.writeI32(struct.gameType);
        }
        if (struct.isSetWinLevel()) {
          oprot.writeI32(struct.winLevel);
        }
        if (struct.isSetBombNum()) {
          oprot.writeI32(struct.bombNum);
        }
        if (struct.isSetGrade()) {
          oprot.writeI32(struct.grade);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCards_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.gameType = iprot.readI32();
          struct.setGameTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.winLevel = iprot.readI32();
          struct.setWinLevelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bombNum = iprot.readI32();
          struct.setBombNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.grade = iprot.readI32();
          struct.setGradeIsSet(true);
        }
      }
    }

  }

  public static class getCards_result implements org.apache.thrift.TBase<getCards_result, getCards_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCards_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCards_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCards_resultTupleSchemeFactory());
    }

    public Cards success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cards.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCards_result.class, metaDataMap);
    }

    public getCards_result() {
    }

    public getCards_result(
      Cards success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCards_result(getCards_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cards(other.success);
      }
    }

    public getCards_result deepCopy() {
      return new getCards_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Cards getSuccess() {
      return this.success;
    }

    public getCards_result setSuccess(Cards success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cards)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCards_result)
        return this.equals((getCards_result)that);
      return false;
    }

    public boolean equals(getCards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCards_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCards_resultStandardSchemeFactory implements SchemeFactory {
      public getCards_resultStandardScheme getScheme() {
        return new getCards_resultStandardScheme();
      }
    }

    private static class getCards_resultStandardScheme extends StandardScheme<getCards_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCards_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cards();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCards_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCards_resultTupleSchemeFactory implements SchemeFactory {
      public getCards_resultTupleScheme getScheme() {
        return new getCards_resultTupleScheme();
      }
    }

    private static class getCards_resultTupleScheme extends TupleScheme<getCards_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCards_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCards_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Cards();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCardsById_args implements org.apache.thrift.TBase<getCardsById_args, getCardsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCardsById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCardsById_args");

    private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCardsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCardsById_argsTupleSchemeFactory());
    }

    public String cardId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARD_ID((short)1, "cardId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARD_ID
            return CARD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCardsById_args.class, metaDataMap);
    }

    public getCardsById_args() {
    }

    public getCardsById_args(
      String cardId)
    {
      this();
      this.cardId = cardId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCardsById_args(getCardsById_args other) {
      if (other.isSetCardId()) {
        this.cardId = other.cardId;
      }
    }

    public getCardsById_args deepCopy() {
      return new getCardsById_args(this);
    }

    @Override
    public void clear() {
      this.cardId = null;
    }

    public String getCardId() {
      return this.cardId;
    }

    public getCardsById_args setCardId(String cardId) {
      this.cardId = cardId;
      return this;
    }

    public void unsetCardId() {
      this.cardId = null;
    }

    /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
    public boolean isSetCardId() {
      return this.cardId != null;
    }

    public void setCardIdIsSet(boolean value) {
      if (!value) {
        this.cardId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARD_ID:
        if (value == null) {
          unsetCardId();
        } else {
          setCardId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARD_ID:
        return getCardId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARD_ID:
        return isSetCardId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCardsById_args)
        return this.equals((getCardsById_args)that);
      return false;
    }

    public boolean equals(getCardsById_args that) {
      if (that == null)
        return false;

      boolean this_present_cardId = true && this.isSetCardId();
      boolean that_present_cardId = true && that.isSetCardId();
      if (this_present_cardId || that_present_cardId) {
        if (!(this_present_cardId && that_present_cardId))
          return false;
        if (!this.cardId.equals(that.cardId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cardId = true && (isSetCardId());
      list.add(present_cardId);
      if (present_cardId)
        list.add(cardId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCardsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCardsById_args(");
      boolean first = true;

      sb.append("cardId:");
      if (this.cardId == null) {
        sb.append("null");
      } else {
        sb.append(this.cardId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCardsById_argsStandardSchemeFactory implements SchemeFactory {
      public getCardsById_argsStandardScheme getScheme() {
        return new getCardsById_argsStandardScheme();
      }
    }

    private static class getCardsById_argsStandardScheme extends StandardScheme<getCardsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCardsById_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // CARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardId = iprot.readString();
                struct.setCardIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCardsById_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cardId != null) {
          oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
          oprot.writeString(struct.cardId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCardsById_argsTupleSchemeFactory implements SchemeFactory {
      public getCardsById_argsTupleScheme getScheme() {
        return new getCardsById_argsTupleScheme();
      }
    }

    private static class getCardsById_argsTupleScheme extends TupleScheme<getCardsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCardsById_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCardId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCardId()) {
          oprot.writeString(struct.cardId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCardsById_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cardId = iprot.readString();
          struct.setCardIdIsSet(true);
        }
      }
    }

  }

  public static class getCardsById_result implements org.apache.thrift.TBase<getCardsById_result, getCardsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCardsById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCardsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCardsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCardsById_resultTupleSchemeFactory());
    }

    public Cards success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cards.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCardsById_result.class, metaDataMap);
    }

    public getCardsById_result() {
    }

    public getCardsById_result(
      Cards success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCardsById_result(getCardsById_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cards(other.success);
      }
    }

    public getCardsById_result deepCopy() {
      return new getCardsById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Cards getSuccess() {
      return this.success;
    }

    public getCardsById_result setSuccess(Cards success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cards)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCardsById_result)
        return this.equals((getCardsById_result)that);
      return false;
    }

    public boolean equals(getCardsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCardsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCardsById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCardsById_resultStandardSchemeFactory implements SchemeFactory {
      public getCardsById_resultStandardScheme getScheme() {
        return new getCardsById_resultStandardScheme();
      }
    }

    private static class getCardsById_resultStandardScheme extends StandardScheme<getCardsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCardsById_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cards();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCardsById_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCardsById_resultTupleSchemeFactory implements SchemeFactory {
      public getCardsById_resultTupleScheme getScheme() {
        return new getCardsById_resultTupleScheme();
      }
    }

    private static class getCardsById_resultTupleScheme extends TupleScheme<getCardsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCardsById_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCardsById_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Cards();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFCardsById_args implements org.apache.thrift.TBase<getFCardsById_args, getFCardsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFCardsById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFCardsById_args");

    private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFCardsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFCardsById_argsTupleSchemeFactory());
    }

    public String cardId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARD_ID((short)1, "cardId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARD_ID
            return CARD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFCardsById_args.class, metaDataMap);
    }

    public getFCardsById_args() {
    }

    public getFCardsById_args(
      String cardId)
    {
      this();
      this.cardId = cardId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFCardsById_args(getFCardsById_args other) {
      if (other.isSetCardId()) {
        this.cardId = other.cardId;
      }
    }

    public getFCardsById_args deepCopy() {
      return new getFCardsById_args(this);
    }

    @Override
    public void clear() {
      this.cardId = null;
    }

    public String getCardId() {
      return this.cardId;
    }

    public getFCardsById_args setCardId(String cardId) {
      this.cardId = cardId;
      return this;
    }

    public void unsetCardId() {
      this.cardId = null;
    }

    /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
    public boolean isSetCardId() {
      return this.cardId != null;
    }

    public void setCardIdIsSet(boolean value) {
      if (!value) {
        this.cardId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CARD_ID:
        if (value == null) {
          unsetCardId();
        } else {
          setCardId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CARD_ID:
        return getCardId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CARD_ID:
        return isSetCardId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFCardsById_args)
        return this.equals((getFCardsById_args)that);
      return false;
    }

    public boolean equals(getFCardsById_args that) {
      if (that == null)
        return false;

      boolean this_present_cardId = true && this.isSetCardId();
      boolean that_present_cardId = true && that.isSetCardId();
      if (this_present_cardId || that_present_cardId) {
        if (!(this_present_cardId && that_present_cardId))
          return false;
        if (!this.cardId.equals(that.cardId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cardId = true && (isSetCardId());
      list.add(present_cardId);
      if (present_cardId)
        list.add(cardId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFCardsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFCardsById_args(");
      boolean first = true;

      sb.append("cardId:");
      if (this.cardId == null) {
        sb.append("null");
      } else {
        sb.append(this.cardId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFCardsById_argsStandardSchemeFactory implements SchemeFactory {
      public getFCardsById_argsStandardScheme getScheme() {
        return new getFCardsById_argsStandardScheme();
      }
    }

    private static class getFCardsById_argsStandardScheme extends StandardScheme<getFCardsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFCardsById_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // CARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardId = iprot.readString();
                struct.setCardIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFCardsById_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cardId != null) {
          oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
          oprot.writeString(struct.cardId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFCardsById_argsTupleSchemeFactory implements SchemeFactory {
      public getFCardsById_argsTupleScheme getScheme() {
        return new getFCardsById_argsTupleScheme();
      }
    }

    private static class getFCardsById_argsTupleScheme extends TupleScheme<getFCardsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFCardsById_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCardId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCardId()) {
          oprot.writeString(struct.cardId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFCardsById_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cardId = iprot.readString();
          struct.setCardIdIsSet(true);
        }
      }
    }

  }

  public static class getFCardsById_result implements org.apache.thrift.TBase<getFCardsById_result, getFCardsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFCardsById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFCardsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFCardsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFCardsById_resultTupleSchemeFactory());
    }

    public Cards success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cards.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFCardsById_result.class, metaDataMap);
    }

    public getFCardsById_result() {
    }

    public getFCardsById_result(
      Cards success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFCardsById_result(getFCardsById_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cards(other.success);
      }
    }

    public getFCardsById_result deepCopy() {
      return new getFCardsById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Cards getSuccess() {
      return this.success;
    }

    public getFCardsById_result setSuccess(Cards success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cards)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFCardsById_result)
        return this.equals((getFCardsById_result)that);
      return false;
    }

    public boolean equals(getFCardsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFCardsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFCardsById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFCardsById_resultStandardSchemeFactory implements SchemeFactory {
      public getFCardsById_resultStandardScheme getScheme() {
        return new getFCardsById_resultStandardScheme();
      }
    }

    private static class getFCardsById_resultStandardScheme extends StandardScheme<getFCardsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFCardsById_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cards();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFCardsById_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFCardsById_resultTupleSchemeFactory implements SchemeFactory {
      public getFCardsById_resultTupleScheme getScheme() {
        return new getFCardsById_resultTupleScheme();
      }
    }

    private static class getFCardsById_resultTupleScheme extends TupleScheme<getFCardsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFCardsById_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFCardsById_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Cards();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
