/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xt.yde.thrift.ai;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 验证出牌
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-07")
public class CheckCards implements org.apache.thrift.TBase<CheckCards, CheckCards._Fields>, java.io.Serializable, Cloneable, Comparable<CheckCards> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckCards");

  private static final org.apache.thrift.protocol.TField LAST_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastCards", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PLAY_CARDS_FIELD_DESC = new org.apache.thrift.protocol.TField("playCards", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPlace", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NOW_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("nowPlace", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CheckCardsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CheckCardsTupleSchemeFactory());
  }

  public List<Integer> lastCards; // required
  public List<Integer> playCards; // required
  public int lastPlace; // required
  public int nowPlace; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_CARDS((short)1, "lastCards"),
    PLAY_CARDS((short)2, "playCards"),
    LAST_PLACE((short)3, "lastPlace"),
    NOW_PLACE((short)4, "nowPlace");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAST_CARDS
          return LAST_CARDS;
        case 2: // PLAY_CARDS
          return PLAY_CARDS;
        case 3: // LAST_PLACE
          return LAST_PLACE;
        case 4: // NOW_PLACE
          return NOW_PLACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTPLACE_ISSET_ID = 0;
  private static final int __NOWPLACE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_CARDS, new org.apache.thrift.meta_data.FieldMetaData("lastCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLAY_CARDS, new org.apache.thrift.meta_data.FieldMetaData("playCards", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LAST_PLACE, new org.apache.thrift.meta_data.FieldMetaData("lastPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOW_PLACE, new org.apache.thrift.meta_data.FieldMetaData("nowPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckCards.class, metaDataMap);
  }

  public CheckCards() {
  }

  public CheckCards(
    List<Integer> lastCards,
    List<Integer> playCards,
    int lastPlace,
    int nowPlace)
  {
    this();
    this.lastCards = lastCards;
    this.playCards = playCards;
    this.lastPlace = lastPlace;
    setLastPlaceIsSet(true);
    this.nowPlace = nowPlace;
    setNowPlaceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CheckCards(CheckCards other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLastCards()) {
      List<Integer> __this__lastCards = new ArrayList<Integer>(other.lastCards);
      this.lastCards = __this__lastCards;
    }
    if (other.isSetPlayCards()) {
      List<Integer> __this__playCards = new ArrayList<Integer>(other.playCards);
      this.playCards = __this__playCards;
    }
    this.lastPlace = other.lastPlace;
    this.nowPlace = other.nowPlace;
  }

  public CheckCards deepCopy() {
    return new CheckCards(this);
  }

  @Override
  public void clear() {
    this.lastCards = null;
    this.playCards = null;
    setLastPlaceIsSet(false);
    this.lastPlace = 0;
    setNowPlaceIsSet(false);
    this.nowPlace = 0;
  }

  public int getLastCardsSize() {
    return (this.lastCards == null) ? 0 : this.lastCards.size();
  }

  public java.util.Iterator<Integer> getLastCardsIterator() {
    return (this.lastCards == null) ? null : this.lastCards.iterator();
  }

  public void addToLastCards(int elem) {
    if (this.lastCards == null) {
      this.lastCards = new ArrayList<Integer>();
    }
    this.lastCards.add(elem);
  }

  public List<Integer> getLastCards() {
    return this.lastCards;
  }

  public CheckCards setLastCards(List<Integer> lastCards) {
    this.lastCards = lastCards;
    return this;
  }

  public void unsetLastCards() {
    this.lastCards = null;
  }

  /** Returns true if field lastCards is set (has been assigned a value) and false otherwise */
  public boolean isSetLastCards() {
    return this.lastCards != null;
  }

  public void setLastCardsIsSet(boolean value) {
    if (!value) {
      this.lastCards = null;
    }
  }

  public int getPlayCardsSize() {
    return (this.playCards == null) ? 0 : this.playCards.size();
  }

  public java.util.Iterator<Integer> getPlayCardsIterator() {
    return (this.playCards == null) ? null : this.playCards.iterator();
  }

  public void addToPlayCards(int elem) {
    if (this.playCards == null) {
      this.playCards = new ArrayList<Integer>();
    }
    this.playCards.add(elem);
  }

  public List<Integer> getPlayCards() {
    return this.playCards;
  }

  public CheckCards setPlayCards(List<Integer> playCards) {
    this.playCards = playCards;
    return this;
  }

  public void unsetPlayCards() {
    this.playCards = null;
  }

  /** Returns true if field playCards is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayCards() {
    return this.playCards != null;
  }

  public void setPlayCardsIsSet(boolean value) {
    if (!value) {
      this.playCards = null;
    }
  }

  public int getLastPlace() {
    return this.lastPlace;
  }

  public CheckCards setLastPlace(int lastPlace) {
    this.lastPlace = lastPlace;
    setLastPlaceIsSet(true);
    return this;
  }

  public void unsetLastPlace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPLACE_ISSET_ID);
  }

  /** Returns true if field lastPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPlace() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPLACE_ISSET_ID);
  }

  public void setLastPlaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPLACE_ISSET_ID, value);
  }

  public int getNowPlace() {
    return this.nowPlace;
  }

  public CheckCards setNowPlace(int nowPlace) {
    this.nowPlace = nowPlace;
    setNowPlaceIsSet(true);
    return this;
  }

  public void unsetNowPlace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOWPLACE_ISSET_ID);
  }

  /** Returns true if field nowPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetNowPlace() {
    return EncodingUtils.testBit(__isset_bitfield, __NOWPLACE_ISSET_ID);
  }

  public void setNowPlaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOWPLACE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_CARDS:
      if (value == null) {
        unsetLastCards();
      } else {
        setLastCards((List<Integer>)value);
      }
      break;

    case PLAY_CARDS:
      if (value == null) {
        unsetPlayCards();
      } else {
        setPlayCards((List<Integer>)value);
      }
      break;

    case LAST_PLACE:
      if (value == null) {
        unsetLastPlace();
      } else {
        setLastPlace((Integer)value);
      }
      break;

    case NOW_PLACE:
      if (value == null) {
        unsetNowPlace();
      } else {
        setNowPlace((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_CARDS:
      return getLastCards();

    case PLAY_CARDS:
      return getPlayCards();

    case LAST_PLACE:
      return getLastPlace();

    case NOW_PLACE:
      return getNowPlace();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_CARDS:
      return isSetLastCards();
    case PLAY_CARDS:
      return isSetPlayCards();
    case LAST_PLACE:
      return isSetLastPlace();
    case NOW_PLACE:
      return isSetNowPlace();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CheckCards)
      return this.equals((CheckCards)that);
    return false;
  }

  public boolean equals(CheckCards that) {
    if (that == null)
      return false;

    boolean this_present_lastCards = true && this.isSetLastCards();
    boolean that_present_lastCards = true && that.isSetLastCards();
    if (this_present_lastCards || that_present_lastCards) {
      if (!(this_present_lastCards && that_present_lastCards))
        return false;
      if (!this.lastCards.equals(that.lastCards))
        return false;
    }

    boolean this_present_playCards = true && this.isSetPlayCards();
    boolean that_present_playCards = true && that.isSetPlayCards();
    if (this_present_playCards || that_present_playCards) {
      if (!(this_present_playCards && that_present_playCards))
        return false;
      if (!this.playCards.equals(that.playCards))
        return false;
    }

    boolean this_present_lastPlace = true;
    boolean that_present_lastPlace = true;
    if (this_present_lastPlace || that_present_lastPlace) {
      if (!(this_present_lastPlace && that_present_lastPlace))
        return false;
      if (this.lastPlace != that.lastPlace)
        return false;
    }

    boolean this_present_nowPlace = true;
    boolean that_present_nowPlace = true;
    if (this_present_nowPlace || that_present_nowPlace) {
      if (!(this_present_nowPlace && that_present_nowPlace))
        return false;
      if (this.nowPlace != that.nowPlace)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lastCards = true && (isSetLastCards());
    list.add(present_lastCards);
    if (present_lastCards)
      list.add(lastCards);

    boolean present_playCards = true && (isSetPlayCards());
    list.add(present_playCards);
    if (present_playCards)
      list.add(playCards);

    boolean present_lastPlace = true;
    list.add(present_lastPlace);
    if (present_lastPlace)
      list.add(lastPlace);

    boolean present_nowPlace = true;
    list.add(present_nowPlace);
    if (present_nowPlace)
      list.add(nowPlace);

    return list.hashCode();
  }

  @Override
  public int compareTo(CheckCards other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLastCards()).compareTo(other.isSetLastCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastCards, other.lastCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayCards()).compareTo(other.isSetPlayCards());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayCards()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playCards, other.playCards);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPlace()).compareTo(other.isSetLastPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPlace, other.lastPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNowPlace()).compareTo(other.isSetNowPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowPlace, other.nowPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CheckCards(");
    boolean first = true;

    sb.append("lastCards:");
    if (this.lastCards == null) {
      sb.append("null");
    } else {
      sb.append(this.lastCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playCards:");
    if (this.playCards == null) {
      sb.append("null");
    } else {
      sb.append(this.playCards);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPlace:");
    sb.append(this.lastPlace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nowPlace:");
    sb.append(this.nowPlace);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CheckCardsStandardSchemeFactory implements SchemeFactory {
    public CheckCardsStandardScheme getScheme() {
      return new CheckCardsStandardScheme();
    }
  }

  private static class CheckCardsStandardScheme extends StandardScheme<CheckCards> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CheckCards struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAST_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.lastCards = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.lastCards.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLastCardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAY_CARDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.playCards = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.playCards.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPlayCardsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastPlace = iprot.readI32();
              struct.setLastPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOW_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nowPlace = iprot.readI32();
              struct.setNowPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CheckCards struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lastCards != null) {
        oprot.writeFieldBegin(LAST_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.lastCards.size()));
          for (int _iter6 : struct.lastCards)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.playCards != null) {
        oprot.writeFieldBegin(PLAY_CARDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.playCards.size()));
          for (int _iter7 : struct.playCards)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_PLACE_FIELD_DESC);
      oprot.writeI32(struct.lastPlace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOW_PLACE_FIELD_DESC);
      oprot.writeI32(struct.nowPlace);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CheckCardsTupleSchemeFactory implements SchemeFactory {
    public CheckCardsTupleScheme getScheme() {
      return new CheckCardsTupleScheme();
    }
  }

  private static class CheckCardsTupleScheme extends TupleScheme<CheckCards> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CheckCards struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLastCards()) {
        optionals.set(0);
      }
      if (struct.isSetPlayCards()) {
        optionals.set(1);
      }
      if (struct.isSetLastPlace()) {
        optionals.set(2);
      }
      if (struct.isSetNowPlace()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLastCards()) {
        {
          oprot.writeI32(struct.lastCards.size());
          for (int _iter8 : struct.lastCards)
          {
            oprot.writeI32(_iter8);
          }
        }
      }
      if (struct.isSetPlayCards()) {
        {
          oprot.writeI32(struct.playCards.size());
          for (int _iter9 : struct.playCards)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
      if (struct.isSetLastPlace()) {
        oprot.writeI32(struct.lastPlace);
      }
      if (struct.isSetNowPlace()) {
        oprot.writeI32(struct.nowPlace);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CheckCards struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.lastCards = new ArrayList<Integer>(_list10.size);
          int _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI32();
            struct.lastCards.add(_elem11);
          }
        }
        struct.setLastCardsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.playCards = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.playCards.add(_elem14);
          }
        }
        struct.setPlayCardsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastPlace = iprot.readI32();
        struct.setLastPlaceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nowPlace = iprot.readI32();
        struct.setNowPlaceIsSet(true);
      }
    }
  }

}

