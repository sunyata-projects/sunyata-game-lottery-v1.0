/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xt.yde.thrift.card.crazy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 发牌信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-08-21")
public class CrazyCards implements org.apache.thrift.TBase<CrazyCards, CrazyCards._Fields>, java.io.Serializable, Cloneable, Comparable<CrazyCards> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrazyCards");

  private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("center", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("left", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("right", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LEFT_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("leftOne", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RIGHT_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("rightOne", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CENTER_THREE_FIELD_DESC = new org.apache.thrift.protocol.TField("centerThree", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BOMB_NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("bombNums", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrazyCardsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrazyCardsTupleSchemeFactory());
  }

  public String cardId; // required
  public List<Integer> center; // required
  public List<Integer> left; // required
  public List<Integer> right; // required
  public int leftOne; // required
  public int rightOne; // required
  public List<Integer> centerThree; // required
  public int bombNums; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CARD_ID((short)1, "cardId"),
    CENTER((short)2, "center"),
    LEFT((short)3, "left"),
    RIGHT((short)4, "right"),
    LEFT_ONE((short)5, "leftOne"),
    RIGHT_ONE((short)6, "rightOne"),
    CENTER_THREE((short)7, "centerThree"),
    BOMB_NUMS((short)8, "bombNums");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CARD_ID
          return CARD_ID;
        case 2: // CENTER
          return CENTER;
        case 3: // LEFT
          return LEFT;
        case 4: // RIGHT
          return RIGHT;
        case 5: // LEFT_ONE
          return LEFT_ONE;
        case 6: // RIGHT_ONE
          return RIGHT_ONE;
        case 7: // CENTER_THREE
          return CENTER_THREE;
        case 8: // BOMB_NUMS
          return BOMB_NUMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEFTONE_ISSET_ID = 0;
  private static final int __RIGHTONE_ISSET_ID = 1;
  private static final int __BOMBNUMS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CENTER, new org.apache.thrift.meta_data.FieldMetaData("center", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LEFT, new org.apache.thrift.meta_data.FieldMetaData("left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RIGHT, new org.apache.thrift.meta_data.FieldMetaData("right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LEFT_ONE, new org.apache.thrift.meta_data.FieldMetaData("leftOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RIGHT_ONE, new org.apache.thrift.meta_data.FieldMetaData("rightOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CENTER_THREE, new org.apache.thrift.meta_data.FieldMetaData("centerThree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BOMB_NUMS, new org.apache.thrift.meta_data.FieldMetaData("bombNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrazyCards.class, metaDataMap);
  }

  public CrazyCards() {
  }

  public CrazyCards(
    String cardId,
    List<Integer> center,
    List<Integer> left,
    List<Integer> right,
    int leftOne,
    int rightOne,
    List<Integer> centerThree,
    int bombNums)
  {
    this();
    this.cardId = cardId;
    this.center = center;
    this.left = left;
    this.right = right;
    this.leftOne = leftOne;
    setLeftOneIsSet(true);
    this.rightOne = rightOne;
    setRightOneIsSet(true);
    this.centerThree = centerThree;
    this.bombNums = bombNums;
    setBombNumsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrazyCards(CrazyCards other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCardId()) {
      this.cardId = other.cardId;
    }
    if (other.isSetCenter()) {
      List<Integer> __this__center = new ArrayList<Integer>(other.center);
      this.center = __this__center;
    }
    if (other.isSetLeft()) {
      List<Integer> __this__left = new ArrayList<Integer>(other.left);
      this.left = __this__left;
    }
    if (other.isSetRight()) {
      List<Integer> __this__right = new ArrayList<Integer>(other.right);
      this.right = __this__right;
    }
    this.leftOne = other.leftOne;
    this.rightOne = other.rightOne;
    if (other.isSetCenterThree()) {
      List<Integer> __this__centerThree = new ArrayList<Integer>(other.centerThree);
      this.centerThree = __this__centerThree;
    }
    this.bombNums = other.bombNums;
  }

  public CrazyCards deepCopy() {
    return new CrazyCards(this);
  }

  @Override
  public void clear() {
    this.cardId = null;
    this.center = null;
    this.left = null;
    this.right = null;
    setLeftOneIsSet(false);
    this.leftOne = 0;
    setRightOneIsSet(false);
    this.rightOne = 0;
    this.centerThree = null;
    setBombNumsIsSet(false);
    this.bombNums = 0;
  }

  public String getCardId() {
    return this.cardId;
  }

  public CrazyCards setCardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  public void unsetCardId() {
    this.cardId = null;
  }

  /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
  public boolean isSetCardId() {
    return this.cardId != null;
  }

  public void setCardIdIsSet(boolean value) {
    if (!value) {
      this.cardId = null;
    }
  }

  public int getCenterSize() {
    return (this.center == null) ? 0 : this.center.size();
  }

  public java.util.Iterator<Integer> getCenterIterator() {
    return (this.center == null) ? null : this.center.iterator();
  }

  public void addToCenter(int elem) {
    if (this.center == null) {
      this.center = new ArrayList<Integer>();
    }
    this.center.add(elem);
  }

  public List<Integer> getCenter() {
    return this.center;
  }

  public CrazyCards setCenter(List<Integer> center) {
    this.center = center;
    return this;
  }

  public void unsetCenter() {
    this.center = null;
  }

  /** Returns true if field center is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter() {
    return this.center != null;
  }

  public void setCenterIsSet(boolean value) {
    if (!value) {
      this.center = null;
    }
  }

  public int getLeftSize() {
    return (this.left == null) ? 0 : this.left.size();
  }

  public java.util.Iterator<Integer> getLeftIterator() {
    return (this.left == null) ? null : this.left.iterator();
  }

  public void addToLeft(int elem) {
    if (this.left == null) {
      this.left = new ArrayList<Integer>();
    }
    this.left.add(elem);
  }

  public List<Integer> getLeft() {
    return this.left;
  }

  public CrazyCards setLeft(List<Integer> left) {
    this.left = left;
    return this;
  }

  public void unsetLeft() {
    this.left = null;
  }

  /** Returns true if field left is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft() {
    return this.left != null;
  }

  public void setLeftIsSet(boolean value) {
    if (!value) {
      this.left = null;
    }
  }

  public int getRightSize() {
    return (this.right == null) ? 0 : this.right.size();
  }

  public java.util.Iterator<Integer> getRightIterator() {
    return (this.right == null) ? null : this.right.iterator();
  }

  public void addToRight(int elem) {
    if (this.right == null) {
      this.right = new ArrayList<Integer>();
    }
    this.right.add(elem);
  }

  public List<Integer> getRight() {
    return this.right;
  }

  public CrazyCards setRight(List<Integer> right) {
    this.right = right;
    return this;
  }

  public void unsetRight() {
    this.right = null;
  }

  /** Returns true if field right is set (has been assigned a value) and false otherwise */
  public boolean isSetRight() {
    return this.right != null;
  }

  public void setRightIsSet(boolean value) {
    if (!value) {
      this.right = null;
    }
  }

  public int getLeftOne() {
    return this.leftOne;
  }

  public CrazyCards setLeftOne(int leftOne) {
    this.leftOne = leftOne;
    setLeftOneIsSet(true);
    return this;
  }

  public void unsetLeftOne() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTONE_ISSET_ID);
  }

  /** Returns true if field leftOne is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftOne() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTONE_ISSET_ID);
  }

  public void setLeftOneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTONE_ISSET_ID, value);
  }

  public int getRightOne() {
    return this.rightOne;
  }

  public CrazyCards setRightOne(int rightOne) {
    this.rightOne = rightOne;
    setRightOneIsSet(true);
    return this;
  }

  public void unsetRightOne() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIGHTONE_ISSET_ID);
  }

  /** Returns true if field rightOne is set (has been assigned a value) and false otherwise */
  public boolean isSetRightOne() {
    return EncodingUtils.testBit(__isset_bitfield, __RIGHTONE_ISSET_ID);
  }

  public void setRightOneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIGHTONE_ISSET_ID, value);
  }

  public int getCenterThreeSize() {
    return (this.centerThree == null) ? 0 : this.centerThree.size();
  }

  public java.util.Iterator<Integer> getCenterThreeIterator() {
    return (this.centerThree == null) ? null : this.centerThree.iterator();
  }

  public void addToCenterThree(int elem) {
    if (this.centerThree == null) {
      this.centerThree = new ArrayList<Integer>();
    }
    this.centerThree.add(elem);
  }

  public List<Integer> getCenterThree() {
    return this.centerThree;
  }

  public CrazyCards setCenterThree(List<Integer> centerThree) {
    this.centerThree = centerThree;
    return this;
  }

  public void unsetCenterThree() {
    this.centerThree = null;
  }

  /** Returns true if field centerThree is set (has been assigned a value) and false otherwise */
  public boolean isSetCenterThree() {
    return this.centerThree != null;
  }

  public void setCenterThreeIsSet(boolean value) {
    if (!value) {
      this.centerThree = null;
    }
  }

  public int getBombNums() {
    return this.bombNums;
  }

  public CrazyCards setBombNums(int bombNums) {
    this.bombNums = bombNums;
    setBombNumsIsSet(true);
    return this;
  }

  public void unsetBombNums() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOMBNUMS_ISSET_ID);
  }

  /** Returns true if field bombNums is set (has been assigned a value) and false otherwise */
  public boolean isSetBombNums() {
    return EncodingUtils.testBit(__isset_bitfield, __BOMBNUMS_ISSET_ID);
  }

  public void setBombNumsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOMBNUMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CARD_ID:
      if (value == null) {
        unsetCardId();
      } else {
        setCardId((String)value);
      }
      break;

    case CENTER:
      if (value == null) {
        unsetCenter();
      } else {
        setCenter((List<Integer>)value);
      }
      break;

    case LEFT:
      if (value == null) {
        unsetLeft();
      } else {
        setLeft((List<Integer>)value);
      }
      break;

    case RIGHT:
      if (value == null) {
        unsetRight();
      } else {
        setRight((List<Integer>)value);
      }
      break;

    case LEFT_ONE:
      if (value == null) {
        unsetLeftOne();
      } else {
        setLeftOne((Integer)value);
      }
      break;

    case RIGHT_ONE:
      if (value == null) {
        unsetRightOne();
      } else {
        setRightOne((Integer)value);
      }
      break;

    case CENTER_THREE:
      if (value == null) {
        unsetCenterThree();
      } else {
        setCenterThree((List<Integer>)value);
      }
      break;

    case BOMB_NUMS:
      if (value == null) {
        unsetBombNums();
      } else {
        setBombNums((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CARD_ID:
      return getCardId();

    case CENTER:
      return getCenter();

    case LEFT:
      return getLeft();

    case RIGHT:
      return getRight();

    case LEFT_ONE:
      return getLeftOne();

    case RIGHT_ONE:
      return getRightOne();

    case CENTER_THREE:
      return getCenterThree();

    case BOMB_NUMS:
      return getBombNums();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CARD_ID:
      return isSetCardId();
    case CENTER:
      return isSetCenter();
    case LEFT:
      return isSetLeft();
    case RIGHT:
      return isSetRight();
    case LEFT_ONE:
      return isSetLeftOne();
    case RIGHT_ONE:
      return isSetRightOne();
    case CENTER_THREE:
      return isSetCenterThree();
    case BOMB_NUMS:
      return isSetBombNums();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrazyCards)
      return this.equals((CrazyCards)that);
    return false;
  }

  public boolean equals(CrazyCards that) {
    if (that == null)
      return false;

    boolean this_present_cardId = true && this.isSetCardId();
    boolean that_present_cardId = true && that.isSetCardId();
    if (this_present_cardId || that_present_cardId) {
      if (!(this_present_cardId && that_present_cardId))
        return false;
      if (!this.cardId.equals(that.cardId))
        return false;
    }

    boolean this_present_center = true && this.isSetCenter();
    boolean that_present_center = true && that.isSetCenter();
    if (this_present_center || that_present_center) {
      if (!(this_present_center && that_present_center))
        return false;
      if (!this.center.equals(that.center))
        return false;
    }

    boolean this_present_left = true && this.isSetLeft();
    boolean that_present_left = true && that.isSetLeft();
    if (this_present_left || that_present_left) {
      if (!(this_present_left && that_present_left))
        return false;
      if (!this.left.equals(that.left))
        return false;
    }

    boolean this_present_right = true && this.isSetRight();
    boolean that_present_right = true && that.isSetRight();
    if (this_present_right || that_present_right) {
      if (!(this_present_right && that_present_right))
        return false;
      if (!this.right.equals(that.right))
        return false;
    }

    boolean this_present_leftOne = true;
    boolean that_present_leftOne = true;
    if (this_present_leftOne || that_present_leftOne) {
      if (!(this_present_leftOne && that_present_leftOne))
        return false;
      if (this.leftOne != that.leftOne)
        return false;
    }

    boolean this_present_rightOne = true;
    boolean that_present_rightOne = true;
    if (this_present_rightOne || that_present_rightOne) {
      if (!(this_present_rightOne && that_present_rightOne))
        return false;
      if (this.rightOne != that.rightOne)
        return false;
    }

    boolean this_present_centerThree = true && this.isSetCenterThree();
    boolean that_present_centerThree = true && that.isSetCenterThree();
    if (this_present_centerThree || that_present_centerThree) {
      if (!(this_present_centerThree && that_present_centerThree))
        return false;
      if (!this.centerThree.equals(that.centerThree))
        return false;
    }

    boolean this_present_bombNums = true;
    boolean that_present_bombNums = true;
    if (this_present_bombNums || that_present_bombNums) {
      if (!(this_present_bombNums && that_present_bombNums))
        return false;
      if (this.bombNums != that.bombNums)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cardId = true && (isSetCardId());
    list.add(present_cardId);
    if (present_cardId)
      list.add(cardId);

    boolean present_center = true && (isSetCenter());
    list.add(present_center);
    if (present_center)
      list.add(center);

    boolean present_left = true && (isSetLeft());
    list.add(present_left);
    if (present_left)
      list.add(left);

    boolean present_right = true && (isSetRight());
    list.add(present_right);
    if (present_right)
      list.add(right);

    boolean present_leftOne = true;
    list.add(present_leftOne);
    if (present_leftOne)
      list.add(leftOne);

    boolean present_rightOne = true;
    list.add(present_rightOne);
    if (present_rightOne)
      list.add(rightOne);

    boolean present_centerThree = true && (isSetCenterThree());
    list.add(present_centerThree);
    if (present_centerThree)
      list.add(centerThree);

    boolean present_bombNums = true;
    list.add(present_bombNums);
    if (present_bombNums)
      list.add(bombNums);

    return list.hashCode();
  }

  @Override
  public int compareTo(CrazyCards other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenter()).compareTo(other.isSetCenter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center, other.center);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeft()).compareTo(other.isSetLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left, other.left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight()).compareTo(other.isSetRight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right, other.right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftOne()).compareTo(other.isSetLeftOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftOne, other.leftOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightOne()).compareTo(other.isSetRightOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightOne, other.rightOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenterThree()).compareTo(other.isSetCenterThree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenterThree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centerThree, other.centerThree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBombNums()).compareTo(other.isSetBombNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBombNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bombNums, other.bombNums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrazyCards(");
    boolean first = true;

    sb.append("cardId:");
    if (this.cardId == null) {
      sb.append("null");
    } else {
      sb.append(this.cardId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("center:");
    if (this.center == null) {
      sb.append("null");
    } else {
      sb.append(this.center);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left:");
    if (this.left == null) {
      sb.append("null");
    } else {
      sb.append(this.left);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("right:");
    if (this.right == null) {
      sb.append("null");
    } else {
      sb.append(this.right);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftOne:");
    sb.append(this.leftOne);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightOne:");
    sb.append(this.rightOne);
    first = false;
    if (!first) sb.append(", ");
    sb.append("centerThree:");
    if (this.centerThree == null) {
      sb.append("null");
    } else {
      sb.append(this.centerThree);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bombNums:");
    sb.append(this.bombNums);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrazyCardsStandardSchemeFactory implements SchemeFactory {
    public CrazyCardsStandardScheme getScheme() {
      return new CrazyCardsStandardScheme();
    }
  }

  private static class CrazyCardsStandardScheme extends StandardScheme<CrazyCards> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrazyCards struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardId = iprot.readString();
              struct.setCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CENTER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.center = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.center.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCenterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.left = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.left.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.right = new ArrayList<Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct.right.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setRightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEFT_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leftOne = iprot.readI32();
              struct.setLeftOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RIGHT_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rightOne = iprot.readI32();
              struct.setRightOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CENTER_THREE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.centerThree = new ArrayList<Integer>(_list9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.centerThree.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setCenterThreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BOMB_NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bombNums = iprot.readI32();
              struct.setBombNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrazyCards struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cardId != null) {
        oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
        oprot.writeString(struct.cardId);
        oprot.writeFieldEnd();
      }
      if (struct.center != null) {
        oprot.writeFieldBegin(CENTER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.center.size()));
          for (int _iter12 : struct.center)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.left != null) {
        oprot.writeFieldBegin(LEFT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.left.size()));
          for (int _iter13 : struct.left)
          {
            oprot.writeI32(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.right != null) {
        oprot.writeFieldBegin(RIGHT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.right.size()));
          for (int _iter14 : struct.right)
          {
            oprot.writeI32(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEFT_ONE_FIELD_DESC);
      oprot.writeI32(struct.leftOne);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIGHT_ONE_FIELD_DESC);
      oprot.writeI32(struct.rightOne);
      oprot.writeFieldEnd();
      if (struct.centerThree != null) {
        oprot.writeFieldBegin(CENTER_THREE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.centerThree.size()));
          for (int _iter15 : struct.centerThree)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOMB_NUMS_FIELD_DESC);
      oprot.writeI32(struct.bombNums);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrazyCardsTupleSchemeFactory implements SchemeFactory {
    public CrazyCardsTupleScheme getScheme() {
      return new CrazyCardsTupleScheme();
    }
  }

  private static class CrazyCardsTupleScheme extends TupleScheme<CrazyCards> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrazyCards struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCardId()) {
        optionals.set(0);
      }
      if (struct.isSetCenter()) {
        optionals.set(1);
      }
      if (struct.isSetLeft()) {
        optionals.set(2);
      }
      if (struct.isSetRight()) {
        optionals.set(3);
      }
      if (struct.isSetLeftOne()) {
        optionals.set(4);
      }
      if (struct.isSetRightOne()) {
        optionals.set(5);
      }
      if (struct.isSetCenterThree()) {
        optionals.set(6);
      }
      if (struct.isSetBombNums()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCardId()) {
        oprot.writeString(struct.cardId);
      }
      if (struct.isSetCenter()) {
        {
          oprot.writeI32(struct.center.size());
          for (int _iter16 : struct.center)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetLeft()) {
        {
          oprot.writeI32(struct.left.size());
          for (int _iter17 : struct.left)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetRight()) {
        {
          oprot.writeI32(struct.right.size());
          for (int _iter18 : struct.right)
          {
            oprot.writeI32(_iter18);
          }
        }
      }
      if (struct.isSetLeftOne()) {
        oprot.writeI32(struct.leftOne);
      }
      if (struct.isSetRightOne()) {
        oprot.writeI32(struct.rightOne);
      }
      if (struct.isSetCenterThree()) {
        {
          oprot.writeI32(struct.centerThree.size());
          for (int _iter19 : struct.centerThree)
          {
            oprot.writeI32(_iter19);
          }
        }
      }
      if (struct.isSetBombNums()) {
        oprot.writeI32(struct.bombNums);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrazyCards struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.cardId = iprot.readString();
        struct.setCardIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.center = new ArrayList<Integer>(_list20.size);
          int _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readI32();
            struct.center.add(_elem21);
          }
        }
        struct.setCenterIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.left = new ArrayList<Integer>(_list23.size);
          int _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readI32();
            struct.left.add(_elem24);
          }
        }
        struct.setLeftIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.right = new ArrayList<Integer>(_list26.size);
          int _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readI32();
            struct.right.add(_elem27);
          }
        }
        struct.setRightIsSet(true);
      }
      if (incoming.get(4)) {
        struct.leftOne = iprot.readI32();
        struct.setLeftOneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rightOne = iprot.readI32();
        struct.setRightOneIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.centerThree = new ArrayList<Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.centerThree.add(_elem30);
          }
        }
        struct.setCenterThreeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bombNums = iprot.readI32();
        struct.setBombNumsIsSet(true);
      }
    }
  }

}

